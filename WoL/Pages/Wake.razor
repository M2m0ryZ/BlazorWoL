@page "/Wake/{Id:int}"

@using WoL.Data
@using WoL.Models
@using WoL.Models.ViewModels
@using WoL.Services
@using WoL.Extensions
@inject IHostService HostService
@inject IWakeService WakeService
@inject NavigationManager NavigationManager

<div class="container">
    <h2>Wake</h2>

    <hr />

    @if (!string.IsNullOrEmpty(Alert))
    {
        <div class="alert @AlertClass">
            @if (AlertSpinner)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            }
            @Alert
        </div>
    }


    @if (host != null)
    {
        <div class="row">
            <div class="col-lg-8 col-xl-6">
                <dl class="row">
                    <dt class="col-sm-4">
                        Title
                    </dt>
                    <dd class="col-sm-8">
                        @host.Caption
                    </dd>
                    <dt class="col-sm-4">
                        Mac Address
                    </dt>
                    <dd class="col-sm-8">
                        @host.GetMacString()
                    </dd>
                    <dt class="col-sm-4">
                        Hostname
                    </dt>
                    <dd class="col-sm-8">
                        @host.Hostname
                    </dd>
                </dl>
            </div>
        </div>
    }

    <a href="">
        Back to List
    </a>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    Host host;

    string Alert = null;
    string AlertClass = null;
    bool AlertSpinner = false;

    private string Info
    {
        set
        {
            AlertClass = "alert-info";
            Alert = value;
        }
    }

    private string Success
    {
        set
        {
            AlertClass = "alert-success";
            Alert = value;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        host = await HostService.Find(Id);
        AlertSpinner = true;
        Info = "Sending wake-up packet...";
        await WakeService.WakeAsync(host.MacAddress);
        AlertSpinner = false;
        Success = "Wake-up packet sent.";
    }

    private async Task Delete()
    {
        await HostService.Delete(Id);
        NavigationManager.NavigateTo("/");
    }
}
